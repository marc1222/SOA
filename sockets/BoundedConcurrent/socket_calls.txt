sockfd = socket(AF_INET, SOCK_STREAM, 0);
if (sockfd < 0)
  error("ERROR opening socket");

from MAN: int socket(int domain, int type, int protocol);

The socket() system call creates a new socket.

The first param is the address domain of the socket (AF_UNIX / AF_INET).

The second argument is the type of socket. stream socket in which characters are read in a continuous stream as if from a file or pipe, and a datagram socket, in which messages are read in chunks. (SOCK_STREAM SOCK_DGRAM)

The third argument is the protocol (0 - OS election). OS will choose TCP for stream sockets and UDP for datagram sockets.
----------------------------------------------------------
int bind(int sockfd, const struct sockaddr *addr,
                socklen_t addrlen);

if (bind(sockfd, (struct sockaddr *) &serv_addr,                   sizeof(serv_addr)) < 0)
  error("ERROR on binding");

The bind() system call binds (vincula) a socket to an address, in this case the address of the current host and port number on which the server will run. 

param1: the socket file descriptor
param2: the address to which is bound (direccion vinculada) pointer to structure type sockaddr or casting sockaddr_in type.
param3: the size of the address to which it is bound
---------------------------------------------
int listen(int sockfd, int backlog);

listen(sockfd,5);

The listen system call allows the process to listen on the socket for connections.

The first argument is the socket file descriptor, and the second is the size of the backlog queue (number of connections that can be waiting while the process is handling a particular connection)
----------------------------------------------
 int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

clilen = sizeof(cli_addr);
newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
if (newsockfd < 0)
  error("ERROR on accept");

The accept() system call causes the process to block until a client connects to the server. it wakes up the process when a connection from a client has been successfully established. It returns a new file descriptor.

The second argument is a reference pointer to the address of the client on the other end of the connection, and the third argument is the size of this structure.





























